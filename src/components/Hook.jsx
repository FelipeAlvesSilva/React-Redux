import React, {useState, useEffect} from 'react'

// Hooks: tratamento para "states" em componentes funcionais
//"Hooks s√£o fun√ß√µes que permitem a voc√™ ‚Äúligar-se‚Äù aos recursos de state e ciclo de vida do React a partir de componentes funcionais" üëç 
export default (props) => {
  // [elementoASerMudado, FuncaoQueMudaElemento] - 
  const [count, setCount] = useState(0)
  const [oddEven, setOddEven] = useState('Even')
  
  // Similar √† componentDidMount() || ComponentDidUpdate()
  // Quando se chama useEffect, se est√° dizendo ao React para executar a sua fun√ß√£o ap√≥s liberar as mudan√ßas para o DOM
  useEffect(() => {
    console.log('Component useEffect event')
    count % 2 === 0 ? setOddEven('Even') : setOddEven('Odd')
  })

  return(
    <React.Fragment>
      <h1>{count}</h1>
      <button onClick={() => setCount(count + 1)}>
        Click
      </button>
      <p>{oddEven}</p>
    </React.Fragment>
  )
}

/*
  Regras dos Hooks:

  - Apenas chame Hooks no n√≠vel mais alto. N√£o chame Hooks dentro de loops, condi√ß√µes ou fun√ß√µes aninhadas.
  - Apenas chame Hooks de componentes funcionais. N√£o chame Hooks de fun√ß√µes JavaScript comuns. (H√° apenas um outro lugar v√°lido para se chamar Hooks ‚Äî dentro dos seus pr√≥prios Hooks customizados.
*/